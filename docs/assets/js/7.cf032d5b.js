(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{355:function(t,a,s){t.exports=s.p+"assets/img/pic_3.1.cbc21a56.png"},356:function(t,a,s){t.exports=s.p+"assets/img/pic_3.2.7f8d1a32.png"},368:function(t,a,s){"use strict";s.r(a);var e=s(45),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"混合编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#混合编程"}},[t._v("#")]),t._v(" 混合编程")]),t._v(" "),e("h2",{attrs:{id:"在同一个项目中使用swift和objective-c"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在同一个项目中使用swift和objective-c"}},[t._v("#")]),t._v(" 在同一个项目中使用Swift和Objective-C")]),t._v(" "),e("p",[t._v("Swift与Objective-C的兼容性，能让你创建一个同时包含这两种语言代码文件的项目。你可以使用这个特性，也就是"),e("em",[t._v("混合编程")]),t._v("（mix and match），来编写混合语言（mixed-language）代码的应用。使用混合编程，你可以使用最新的Swift的特性实现程序的部分功能，同时把这部分功能整合回你已有的Objective-C代码库（codebase）。")]),t._v(" "),e("h3",{attrs:{id:"混合编程概览"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#混合编程概览"}},[t._v("#")]),t._v(" 混合编程概览")]),t._v(" "),e("p",[t._v("Objective-C和Swift的文件可以在同一个项目中共存，不论该项目最初是一个Objective-C项目还是Swift项目。你可以为现存的项目添加另一种语言的文件。这种自然的工作流使得创建混合语言的应用和框架，跟创建单一语言的应用或框架一样简单。")]),t._v(" "),e("p",[t._v("处理混合语言项目（target）的过程，取决于是应用项目还是框架项目而略有差异。在同一个项目中使用两种语言的基本文件导入模型参见下图，后续的章节中将对细节进行详述。")]),t._v(" "),e("p",[t._v("（译者按：target是一个编译目标。通常，一个项目会包含一个或多个编译目标。为了语句通顺，在翻译target的时候，为了便于理解，在不会产生误解的时候，我会根据语境，把target翻译成编译目标或项目。）")]),t._v(" "),e("p",[e("img",{attrs:{src:s(355),alt:"文件导入模型"}})]),t._v(" "),e("p",[t._v("（译者按：umbrella header这里翻译为综合头文件。unbrella header是框架中使用的头文件，这个头文件用来包含框架中其他头文件，用来综合地暴露框架的接口。）")]),t._v(" "),e("h3",{attrs:{id:"从同一个应用编译目标中导入代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从同一个应用编译目标中导入代码"}},[t._v("#")]),t._v(" 从同一个应用编译目标中导入代码")]),t._v(" "),e("p",[t._v("如果你在编写混合语言的应用，你可能需要在Swift中访问Objective-C代码，或在Objective-C中访问Swift代码。这个过程在本节中讨论，适用于非框架（non-framework）的编译目标。")]),t._v(" "),e("h4",{attrs:{id:"把objective-c导入swift"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#把objective-c导入swift"}},[t._v("#")]),t._v(" 把Objective-C导入Swift")]),t._v(" "),e("p",[t._v("要在Swift代码的编译目标中导入一系列Objective-C文件，你可以使用"),e("em",[t._v("Objective-C桥接头文件")]),t._v("，将这些文件暴露给Swift。当你向一个已有的Objective-C应用中增加Swift文件，或向一个已有的Swift应用中增加Objective-C文件的时候，Xcode会引导你创建这个头文件。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(356),alt:"创建桥接头文件"}})]),t._v(" "),e("p",[t._v("如果你确认，Xcode会在创建Objective-C文件的同时创建这个头文件，并用产品模块（product module）名加上"),e("code",[t._v('"-Bridging-Header.h"')]),t._v("作为文件名。（你将在"),e("a",{attrs:{href:"#%E7%BB%99%E4%BA%A7%E5%93%81%E6%A8%A1%E5%9D%97%E5%91%BD%E5%90%8D"}},[t._v("给产品模块命名")]),t._v("章节学到更多关于产品模块名的信息。）")]),t._v(" "),e("p",[t._v("你也可以通过 File > New > File > (iOS，watchOS，tvOS或OS X) > Source > Header File 自己手工创建一个桥接头文件。")]),t._v(" "),e("p",[t._v("你需要自己编辑这个头文件，把Objective-C代码暴露给Swift代码。")]),t._v(" "),e("h5",{attrs:{id:"把同一个编译目标中的objective-c代码导入swift"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#把同一个编译目标中的objective-c代码导入swift"}},[t._v("#")]),t._v(" 把同一个编译目标中的Objective-C代码导入Swift")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("在你的Objective-C桥接头文件中导入所有你想暴露给Swift的Objective-C头文件。例如：")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objc"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XYZCustomCell.h"')])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XYZCustomView.h"')])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XYZCustomViewController.h"')])]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("在编译设置（Build Settings）里，在Swift Compiler - Code Generation部分，确保Objective-C Bridging Header这个编译设置包含了桥接头文件的路径。")]),t._v(" "),e("p",[t._v("路径必需是相对于项目的路径，这和Build Settings里设置Info.plist时的要求是一样的。在大多数情况下，你无需修改这个设置。")])])]),t._v(" "),e("p",[t._v("在桥接头文件中列出的所有Objective-C头文件都将对Swift可见。Objecitve-C的功能会对同一个编译目标中的所有Swift文件都可用，而无需使用任何导入（import）语句。你可以像使用系统类那样，用Swift的语法调用你自己的Objective-C代码。")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" cell "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("XYZCustomCell")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmyCell"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("subtitle "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A custom cell"')]),t._v("\n")])])]),e("h4",{attrs:{id:"把swift导入objective-c"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#把swift导入objective-c"}},[t._v("#")]),t._v(" 把Swift导入Objective-C")]),t._v(" "),e("p",[t._v("当你把Swift代码导入Objective-C时，你是靠"),e("em",[t._v("Xcode生成的头文件")]),t._v("把它们暴露给Objective-C的。这个自动生成的文件是一个Objective-C头文件，声明了编译目标中Swift代码的接口。你可以认为它是Swift代码的综合头文件（umbrella header）。这个头文件的名字是产品模块名加上"),e("code",[t._v('"-Swift.h"')]),t._v("。（你将在"),e("a",{attrs:{href:"#%E7%BB%99%E4%BA%A7%E5%93%81%E6%A8%A1%E5%9D%97%E5%91%BD%E5%90%8D"}},[t._v("给产品模块命名")]),t._v("章节学到更多关于产品模块名的信息。）")]),t._v(" "),e("p",[t._v("默认条件下，生成的头文件包含了Swift文件中有"),e("code",[t._v("public")]),t._v("修饰符的声明。如果应用编译目标包含了Objective-C桥接头文件，那么这个文件还包含所有使用"),e("code",[t._v("internal")]),t._v("修饰符的声明。使用"),e("code",[t._v("private")]),t._v("修饰符标记的声明不会出现在生成的头文件中。除非显式地使用"),e("code",[t._v("@IBAction")]),t._v("，"),e("code",[t._v("@IBOutlet")]),t._v("或"),e("code",[t._v("@objc")]),t._v("做了标记，否则私有的声明不会暴露给Objective-C。如果应用编译目标启用了测试，并且产品模块的导入语句加上了"),e("code",[t._v("@testable")]),t._v("修饰符，那么单元测试编译目标可以访问任何用"),e("code",[t._v("internal")]),t._v("修饰符标记的声明，就好像它们是用"),e("code",[t._v("public")]),t._v("修饰符标记的一样。")]),t._v(" "),e("p",[t._v("要了解更多关于访问控制修饰符的信息，请参考“Swift编程语言（Swift 2.2版）”的“访问控制”章节。")]),t._v(" "),e("p",[t._v("要创建生成的头文件，你不需要做任何事--只需在要使用它的Objective-C代码中导入这个头文件。需要注意的是，生成的头文件中的Swift接口会包含所有在你的Swift代码中用到的Objective-C类型的引用，因此，如果你在Swift代码中使用了你自己创建的的Objective-C类，那么请确保在Objective-C的"),e("code",[t._v(".m")]),t._v("文件导入Swift生成的头文件之前，先导入自定义类型的Objective-C头文件。")]),t._v(" "),e("h5",{attrs:{id:"把同一个编译目标中的swift代码导入objective-c"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#把同一个编译目标中的swift代码导入objective-c"}},[t._v("#")]),t._v(" 把同一个编译目标中的Swift代码导入Objective-C")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("使用如下语法，替换成合适的文件名，可以把同一个编译目标中的Swift代码导入Objective-C的"),e("code",[t._v(".m")]),t._v("文件。")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objc"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ProductModuleName-Swift.h"')])]),t._v("\n")])])])])]),t._v(" "),e("p",[t._v("编译目标中的Swift文件将会对包含上述导入语句的Objective-C的"),e("code",[t._v(".m")]),t._v("文件可见。要了解更多关于如何在Objective-C代码中使用Swift的信息，请参考"),e("a",{attrs:{href:"%E5%9C%A8Objective-C%E4%B8%AD%E4%BD%BF%E7%94%A8Swift"}},[t._v("在Objective-C中使用Swift")]),t._v("章节。")]),t._v(" "),e("table",[e("tr",[e("td",[t._v(" ")]),e("td",[e("strong",[t._v("导入至Swift")])]),e("td",[e("strong",[t._v("导入至Objecitve-C")])])]),t._v(" "),e("tr",[e("td",[t._v("Swift代码")]),e("td",[t._v("无需导入语句")]),e("td",[e("code",[t._v('#import "ProductModuleName-Swift.h"')])])]),t._v(" "),e("tr",[e("td",[t._v("Objective-C代码")]),e("td",[t._v("无需导入语句；需要Objecitve-C桥接头文件")]),e("td",[e("code",[t._v('#import "Header.h"')])])])]),t._v(" "),e("h3",{attrs:{id:"从同一个框架编译目标中导入代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从同一个框架编译目标中导入代码"}},[t._v("#")]),t._v(" 从同一个框架编译目标中导入代码")]),t._v(" "),e("p",[t._v("如果你编写混合语言的框架，那么你就可能需要在Objective-C代码中访问Swift或在Swift代码中访问Objective-C。")]),t._v(" "),e("h4",{attrs:{id:"把objective-c导入swift-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#把objective-c导入swift-2"}},[t._v("#")]),t._v(" 把Objective-C导入Swift")]),t._v(" "),e("p",[t._v("要在Swift代码的框架编译目标中导入一系列Objective-C文件，你需要使用框架的Objective-C综合头文件（umbrella header）导入这些文件。")]),t._v(" "),e("h5",{attrs:{id:"把同一个框架中的objective-c代码导入swift"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#把同一个框架中的objective-c代码导入swift"}},[t._v("#")]),t._v(" 把同一个框架中的Objective-C代码导入Swift")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("在Build Settings中的Packaging部分，确保框架编译目标的Define Module选项设置为了“YES”。")])]),t._v(" "),e("li",[e("p",[t._v("在综合头文件中，导入所有你要暴露给Swift的Objective-C头文件。例如：")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objc"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token expression"}},[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("XYZ"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("XYZCustomCell"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token expression"}},[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("XYZ"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("XYZCustomView"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token expression"}},[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("XYZ"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("XYZCustomViewController"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("Swift能看到所有公开暴露在综合头文件中的头文件，框架中的Objective-C文件会自动对框架中的所有Swift文件可用，无需额外的导入声明。你可以像使用系统类那样，用Swift的语法调用你自己的Objective-C代码。")])])]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" myOtherCell "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("XYZCustomCell")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmyOtherCell"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("subtitle "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Another custom cell"')]),t._v("\n")])])]),e("h4",{attrs:{id:"把swift导入objective-c-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#把swift导入objective-c-2"}},[t._v("#")]),t._v(" 把Swift导入Objective-C")]),t._v(" "),e("p",[t._v("要在同一框架目标中的Objective-C代码中使用Swift文件，你无需在综合头文件中导入任何文件。你只需在任何需要使用Swift代码的Objective-C的"),e("code",[t._v(".m")]),t._v("文件中导入Xcode生成的头文件。")]),t._v(" "),e("p",[t._v("因为框架目标的生成的头文件的是框架公开接口的一部分，因此只有用"),e("code",[t._v("public")]),t._v("修饰符标记的声明才会出现在框架目标的生成的头文件中。如果Swift的类是派生自Objective-C的类，那么你还可以在框架中的Objective-C能访问用"),e("code",[t._v("internal")]),t._v("修饰符标记的属性和方法。要了解更多关于访问控制修饰符的信息，请参考“Swift编程语言（Swift 2.2版）”的“访问控制”章节。")]),t._v(" "),e("h5",{attrs:{id:"把同一个编译框架中的swift代码导入objective-c"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#把同一个编译框架中的swift代码导入objective-c"}},[t._v("#")]),t._v(" 把同一个编译框架中的Swift代码导入Objective-C")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("在Build Settings中的Packaging部分，确保框架编译目标的Define Module选项设置为了“YES”。")])]),t._v(" "),e("li",[e("p",[t._v("使用如下语法，替换成合适的文件名，可以把同一个框架中的Swift代码导入Objective-C的"),e("code",[t._v(".m")]),t._v("文件。")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objc"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token expression"}},[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ProductName"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("ProductModuleName"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Swift"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),t._v("\n")])])])])]),t._v(" "),e("p",[t._v("框架中的Swift文件将会对含有上述导入语句的Objective-C的"),e("code",[t._v(".m")]),t._v("文件可见。要了解更多关于如何在Objective-C代码中使用Swift的信息，请参考"),e("a",{attrs:{href:"#%E5%9C%A8objective-c%E4%B8%AD%E4%BD%BF%E7%94%A8swift"}},[t._v("在Objective-C中使用Swift")]),t._v("章节。")]),t._v(" "),e("table",[e("tr",[e("td",[t._v(" ")]),e("td",[e("strong",[t._v("导入至Swift")])]),e("td",[e("strong",[t._v("导入至Objecitve-C")])])]),t._v(" "),e("tr",[e("td",[t._v("Swift代码")]),e("td",[t._v("无需导入语句")]),e("td",[e("code",[t._v("#import <ProductName/ProductModuleName-Swift.h>")])])]),t._v(" "),e("tr",[e("td",[t._v("Objective-C代码")]),e("td",[t._v("无需导入语句；需要综合头文件")]),e("td",[e("code",[t._v('#import "Header.h"')])])])]),t._v(" "),e("h3",{attrs:{id:"导入外置框架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#导入外置框架"}},[t._v("#")]),t._v(" 导入外置框架")]),t._v(" "),e("p",[t._v("你可以在纯Objective-C代码库（codebase）、纯Swift代码库，或混合语言的代码库中导入外置框架（external framework）。无论外置框架是用一种语言编写，还是同时包含了两种语言的文件，导入的过程都是一样的。当你导入外置框架的时候，请确保框架的Build Settings中的Define Module的值设置成了“Yes”。")]),t._v(" "),e("p",[t._v("你可以在其他编译目标中的任何Swift文件中使用如下语法导入框架：")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("FrameworkName")]),t._v("\n")])])]),e("p",[t._v("你可以在其他编译目标中的任何Objective-C的"),e("code",[t._v(".m")]),t._v("文件中使用如下语法导入框架：")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objc"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("import FrameworkName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("table",[e("tr",[e("td",[t._v(" ")]),e("td",[e("strong",[t._v("导入至Swift")])]),e("td",[t._v("导入至Objecitve-C")])]),t._v(" "),e("tr",[e("td",[t._v("任何语言编写的框架")]),e("td",[e("code",[t._v("import FrameworkName")])]),e("td",[e("code",[t._v("@import FrameworkName;")])])])]),t._v(" "),e("h3",{attrs:{id:"在objective-c中使用swift"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在objective-c中使用swift"}},[t._v("#")]),t._v(" 在Objective-C中使用Swift")]),t._v(" "),e("p",[t._v("当你把Swift导入Objective-C之后，你就可以常规的Objective-C的语法来操作Swift类了。")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objc"}},[e("code",[t._v("MySwiftClass "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("swiftObject "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MySwiftClass alloc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" init"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("swiftObject swiftMethod"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Swift类或协议必需使用"),e("code",[t._v("@objc")]),t._v("注解标记，才能在Objective-C中访问。这个注解告诉编译器这段Swift代码可以在Objective-C中访问。如果Swift类是派生自Objective-C类，编译器会自动为你给它加上"),e("code",[t._v("@objc")]),t._v("注解。要了解更多信息，请参考"),e("RouterLink",{attrs:{to:"/2_互操作性.html#swift类型的兼容性"}},[t._v("Swift类型的兼容性")]),t._v("。")],1),t._v(" "),e("p",[t._v("你可以访问用"),e("code",[t._v("@objc")]),t._v("注解标记的类或协议中的一切，只要它与Objective-C兼容。除了下面列出的这些Swift特有的特性：")]),t._v(" "),e("ul",[e("li",[t._v("泛型")]),t._v(" "),e("li",[t._v("元组（tuple）")]),t._v(" "),e("li",[t._v("在Swift中定义，不是以"),e("code",[t._v("Int")]),t._v("作为原始值类型的枚举")]),t._v(" "),e("li",[t._v("Swift中定义的结构体")]),t._v(" "),e("li",[t._v("Swift中定义的顶层函数")]),t._v(" "),e("li",[t._v("Swift中定义的全局变量")]),t._v(" "),e("li",[t._v("Swift中定义的类型别名（typealias）")]),t._v(" "),e("li",[t._v("Swift风格的变长参数（variadics）")]),t._v(" "),e("li",[t._v("嵌套类型")]),t._v(" "),e("li",[t._v("匿名函数（curried functions）")])]),t._v(" "),e("p",[t._v("例如，接受泛型参数的方法或者返回元组的方法是不能在Objective-C中使用的。")]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("提示")])]),t._v(" "),e("p",[t._v("你不能在Objective-C中创建Swift类的子类。")])]),t._v(" "),e("h4",{attrs:{id:"在objective-c头文件中引用swift的类和协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在objective-c头文件中引用swift的类和协议"}},[t._v("#")]),t._v(" 在Objective-C头文件中引用Swift的类和协议")]),t._v(" "),e("p",[t._v("为了避免循环引用，不要在Objective-C的头文件（"),e("code",[t._v(".h")]),t._v("）中导入Swift代码。你可以在Objective-C的接口中使用预声明（forward declare）来引用Swift的类和协议。")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objc"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// MyObject.h")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@class")]),t._v(" MySwiftClass\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("protocal MySwiftProtocal\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" MyObjcClass "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NSObject\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MySwiftClass "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("returnSwiftClassInstance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("MySwiftProtocal"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("returnInstanceAdoptingSwiftProtocal"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n")])])]),e("p",[t._v("预声明的Swift类和协议只能用在方法和属性的声明中。")]),t._v(" "),e("h4",{attrs:{id:"在objective-c实现中接受swift的协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在objective-c实现中接受swift的协议"}},[t._v("#")]),t._v(" 在Objective-C实现中接受Swift的协议")]),t._v(" "),e("p",[t._v("通过导入Xcode生成的Swift代码的头文件，并使用类扩展（class extension），Objective-C的类可以在其实现（"),e("code",[t._v(".m")]),t._v("）文件中接受Swift的协议。")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objc"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// MyObjcClass.m")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ProductModuleName-Swift.h"')])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("MyObjcClass")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("MySwiftProtocal"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" MyObjcClass\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n")])])]),e("h3",{attrs:{id:"覆盖objective-c接口中的swift名字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#覆盖objective-c接口中的swift名字"}},[t._v("#")]),t._v(" 覆盖Objective-C接口中的Swift名字")]),t._v(" "),e("p",[t._v("Swift编译器会自动把Objective-C代码自动导入为常规的Swift代码。它会把Objective-C类的工厂方法导入为Swift的构造方法，截断Objective-C的枚举类型值的名字。")]),t._v(" "),e("p",[t._v("可能有极少数的情况下，你的代码会无法自动处理。如果你需要修改导入Swift的Objective-C的方法，枚举值，或者选项组的值的名字，你可以使用"),e("code",[t._v("NS_SWIFT_NAME")]),t._v("宏自定义如何导入声明。")]),t._v(" "),e("h4",{attrs:{id:"类的工厂方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类的工厂方法"}},[t._v("#")]),t._v(" 类的工厂方法")]),t._v(" "),e("p",[t._v("如果Swift编译器未能识别类的工厂方法，你可以使用"),e("code",[t._v("NS_SWIFT_NAME")]),t._v("宏，传入Swift构造方法的签名，以使之被正确导入。例如：")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objc"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instancetype"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("recordWithRPM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSUInteger"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("RPM "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NS_SWIFT_NAME")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RPM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("如果Swift编译器错误地把一个方法认作了类的工厂方法，你也可以使用"),e("code",[t._v("NS_SWIFT_NAME")]),t._v("宏，传入Swift的方法签名，以使之被正确导入。例如：")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objc"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("recordWithQuality"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("quality "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NS_SWIFT_NAME")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("record")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("quality"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h4",{attrs:{id:"枚举"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[t._v("#")]),t._v(" 枚举")]),t._v(" "),e("p",[t._v("默认情况下，Swift在导入枚举类型时会截断枚举值名字的前缀。要自定枚举值的名字，你可以使用"),e("code",[t._v("NS_SWIFT_NAME")]),t._v("宏，传入Swift枚举值的名字。例如：")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objc"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NS_ENUM")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSInteger"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ABCRecordSide"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tABCRecordSideA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tABCRecordSideB "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NS_SWIFT_NAME")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FlipSide"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"使objective-c的接口在swift中不可用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使objective-c的接口在swift中不可用"}},[t._v("#")]),t._v(" 使Objective-C的接口在Swift中不可用")]),t._v(" "),e("p",[t._v("部分Objective-C的接口可能不适合或不需要暴露给Swift。要防止Objective-C的声明被导入Swift，可以使用"),e("code",[t._v("NS_SWIFT_UNAVAILABLE")]),t._v("宏，并传一个引导API使用者使用可能的替代方案的消息给它。")]),t._v(" "),e("p",[t._v("比如，Objective-C类提供了一个接受一系列键值对作为变长参数的快捷构造方法。这种情况就可以建议Swift的使用者使用字典字面量代替：")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objc"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instancetype"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("collectionWithValues"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSArray "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("values forKeys"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSArray"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("NSCopying"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("keys "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NS_SWIFT_UNAVAILABLE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Use a dictionary literal instead"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("试图在Swift代码中调用"),e("code",[t._v("+collectionWithValues:forKeys:")]),t._v("方法会产生一个编译错误。")]),t._v(" "),e("h3",{attrs:{id:"改进objective-c的声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#改进objective-c的声明"}},[t._v("#")]),t._v(" 改进Objective-C的声明")]),t._v(" "),e("p",[t._v("你可以对Objective-C的方法声明使用"),e("code",[t._v("NS_REFINED_FOR_SWIFT")]),t._v("宏，并在一个扩展中提供一个改进的Swift接口，原始实现在改进的接口中可被调用。例如，一个接受多于一个指针参数的Objective-C方法可以在Swift中改进为返回一个元组值。")]),t._v(" "),e("ul",[e("li",[t._v("构造方法在导入Swift时，在第一个外置参数名前加上了双下划线（"),e("code",[t._v("__")]),t._v("）前缀。")]),t._v(" "),e("li",[t._v("只要下标方法或赋值方法的任意一个使用了"),e("code",[t._v("NS_REFINED_FOR_SWIFT")]),t._v("标记，对象的下标取值方法就会被导入成Swift的方法，方法名是添加了双下划线（"),e("code",[t._v("__")]),t._v("）前缀的基本名，而不是Swift的下标（subscript）。")]),t._v(" "),e("li",[t._v("其他方法会被导入为名字前加上了双下划线（"),e("code",[t._v("__")]),t._v("）的方法。")])]),t._v(" "),e("p",[t._v("对于下面这个Objective-C声明：")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objc"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" Color "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NSObject\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("getRed"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nullable CGFloat "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("red\n\t\t green"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nullable CGFloat "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("green\n\t\t  blue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nullable CGFloat "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("blue\n\t\t aplha"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nullable CGFloat "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("alpha NS_REFINED_FOR_SWIFT"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n")])])]),e("p",[t._v("现在，你就可以在扩展中提供一个改进的Swift接口了，如下：")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Color")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RGBA")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("red"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("CGFloat")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" green"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("CGFloat")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" blue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("CGFloat")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" alpha"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("CGFloat")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("CGFloat")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" g"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("CGFloat")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("CGFloat")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("CGFloat")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("__getRed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("r"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" green"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("g"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" blue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" alpha"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("red"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" r"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" green"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" g"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" blue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" alpha"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"给产品模块命名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#给产品模块命名"}},[t._v("#")]),t._v(" 给产品模块命名")]),t._v(" "),e("p",[t._v("Xcode为Swift代码生成的头文件的名字、以及Xcode为你创建的Objective-C桥接头文件的名字，是根据产品模块的名字生成的。默认情况下，产品模块名和产品名是一样的。不过如果产品名包含了非字母和数字字符，例如英文句号（"),e("code",[t._v(".")]),t._v("），在产品模块名中它们会被替换成下划线（"),e("code",[t._v("_")]),t._v("）。如果名字以数字开头，那么第一个数字也会被替换成下划线。")]),t._v(" "),e("p",[t._v("你也可以给产品模块名提供一个自定义的名字。Xcode会用它命名桥接头文件和生成的头文件。要修改产品模块名，你只需修改构建设置（Build Settings）中Product Module Name参数的值。")]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("提示")])]),t._v(" "),e("p",[t._v("你不能覆盖框架的产品模块名。")])]),t._v(" "),e("h3",{attrs:{id:"问题诊断和注意事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题诊断和注意事项"}},[t._v("#")]),t._v(" 问题诊断和注意事项")]),t._v(" "),e("ul",[e("li",[t._v("把Swift和Objective-C的文件看作是同一组代码，注意命名是否有冲突。")]),t._v(" "),e("li",[t._v("如果你在编写框架，请确保构建设置（Build Settings）的Packageing部分的Define Module（"),e("code",[t._v("DEFINE_MODULE")]),t._v("）参数的值为“YES”。")]),t._v(" "),e("li",[t._v("如果需要使用Objective-C的桥接头文件，请确保构建设置（Build Settings）的Swift Compiler - Code Generation部分的Objective-C Bridging Header（"),e("code",[t._v("SWIFT_OBJC_BRIDGING_HEADER")]),t._v("）参数的值被设置为桥接头文件在项目中的相对路径（如，“MyApp/MyApp-Bridging-Header.h”）。")]),t._v(" "),e("li",[t._v("Xcode在命名Objective-C桥接头文件和Swift代码的生成的头文件时，使用的是产品模块名（"),e("code",[t._v("PRODUCT_MODULE_NAME")]),t._v("），而不是编译目标名（"),e("code",[t._v("TARGET_NAME")]),t._v("）。要了解更多关于产品模块命名的信息，请参阅"),e("a",{attrs:{href:"#%E7%BB%99%E4%BA%A7%E5%93%81%E6%A8%A1%E5%9D%97%E5%91%BD%E5%90%8D"}},[t._v("给产品模块命名")]),t._v("章节。")]),t._v(" "),e("li",[t._v("要在Objective-C中可以访问和使用，Swift类必需派生自一个Objective-C类或者必须使用"),e("code",[t._v("@objc")]),t._v("标记。")]),t._v(" "),e("li",[t._v("当你把Swift代码导入到Objective-C中时，请牢记，Objective-C无法转译部分Swift特有的特性。要查看这个列表，请查看"),e("a",{attrs:{href:"#%E6%8A%8Aswift%E5%AF%BC%E5%85%A5objective-c"}},[t._v("把Swift导入Objective-C")]),t._v("章节。")]),t._v(" "),e("li",[t._v("如果你在Swift代码中使用了你自己创建的的Objective-C类，那么请确保在Objective-C的"),e("code",[t._v(".m")]),t._v("文件导入Swift生成的头文件之前，先导入自定义类型的Objective-C头文件。")]),t._v(" "),e("li",[t._v("使用"),e("code",[t._v("private")]),t._v("修饰符标记的声明不会出现在生成的头文件中。除非显式地使用"),e("code",[t._v("@IBAction")]),t._v("，"),e("code",[t._v("@IBOutlet")]),t._v("或"),e("code",[t._v("@objc")]),t._v("做了标记，否则私有的声明不会暴露给Objective-C。")]),t._v(" "),e("li",[t._v("对于应用编译目标，如果包含了Objective-C的桥接头文件，使用"),e("code",[t._v("internal")]),t._v("修饰符标记的声明会出现在生成的头文件中。")]),t._v(" "),e("li",[t._v("对于框架编译目标，只有用"),e("code",[t._v("public")]),t._v("修饰符标记的声明才会出现在框架目标的生成的头文件中。如果Swift的类是派生自Objective-C的类，那么你还可以在框架中的Objective-C中访问用"),e("code",[t._v("internal")]),t._v("修饰符标记的属性和方法。要了解更多关于访问控制修饰符的信息，请参考“Swift编程语言（Swift 2.2版）”的“访问控制”章节。")])]),t._v(" "),e("p",[e("RouterLink",{attrs:{to:"/2_互操性.html#开始"}},[t._v("< 2. 互操作性")]),t._v(" | "),e("RouterLink",{attrs:{to:"/0_目录.html"}},[t._v("目录")]),t._v(" | "),e("RouterLink",{attrs:{to:"/4_迁移到Swift.html"}},[t._v("4. 迁移到Swift >")])],1)])}),[],!1,null,null,null);a.default=r.exports}}]);